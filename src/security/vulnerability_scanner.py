import os
import subprocess
import json
from typing import Dict, List, Optional
from datetime import datetime
import logging
import requests
from dataclasses import dataclass

@dataclass
class Vulnerability:
    id: str
    title: str
    description: str
    severity: str
    cvss_score: float
    affected_component: str
    recommendation: str
    references: List[str]

class VulnerabilityScanner:
    def __init__(self, config: Dict):
        self.config = config
        self.logger = logging.getLogger(__name__)
        
    def scan_dependencies(self) -> Dict:
        """Scan project dependencies for known vulnerabilities."""
        try:
            # Run safety check for Python dependencies
            result = subprocess.run(
                ['safety', 'check', '--json'],
                capture_output=True,
                text=True
            )
            
            vulnerabilities = []
            if result.returncode != 0:
                findings = json.loads(result.stdout)
                for finding in findings:
                    vuln = Vulnerability(
                        id=finding['vulnerability_id'],
                        title=finding['advisory'],
                        description=finding['details'],
                        severity=finding['severity'],
                        cvss_score=finding.get('cvss_score', 0.0),
                        affected_component=finding['package_name'],
                        recommendation=f"Upgrade to version {finding['fixed_version']}",
                        references=finding.get('references', [])
                    )
                    vulnerabilities.append(vuln)
                    
            return {
                'scan_type': 'dependency',
                'timestamp': datetime.utcnow().isoformat(),
                'vulnerabilities': [vars(v) for v in vulnerabilities]
            }
            
        except Exception as e:
            self.logger.error(f"Dependency scan error: {str(e)}")
            return {
                'scan_type': 'dependency',
                'timestamp': datetime.utcnow().isoformat(),
                'error': str(e)
            }
            
    def scan_code(self) -> Dict:
        """Scan source code for security issues."""
        try:
            # Run bandit for Python code security analysis
            result = subprocess.run(
                ['bandit', '-r', 'src/', '-f', 'json'],
                capture_output=True,
                text=True
            )
            
            findings = json.loads(result.stdout)
            vulnerabilities = []
            
            for issue in findings['results']:
                vuln = Vulnerability(
                    id=f"BANDIT_{issue['test_id']}",
                    title=issue['test_name'],
                    description=issue['issue_text'],
                    severity=issue['issue_severity'],
                    cvss_score=0.0,  # Bandit doesn't provide CVSS scores
                    affected_component=f"{issue['filename']}:{issue['line_number']}",
                    recommendation=issue.get('more_info', ''),
                    references=[]
                )
                vulnerabilities.append(vuln)
                
            return {
                'scan_type': 'code',
                'timestamp': datetime.utcnow().isoformat(),
                'vulnerabilities': [vars(v) for v in vulnerabilities]
            }
            
        except Exception as e:
            self.logger.error(f"Code scan error: {str(e)}")
            return {
                'scan_type': 'code',
                'timestamp': datetime.utcnow().isoformat(),
                'error': str(e)
            }
            
    def scan_configuration(self) -> Dict:
        """Scan configuration files for security issues."""
        try:
            vulnerabilities = []
            
            # Scan configuration files
            config_files = self._find_config_files()
            for config_file in config_files:
                issues = self._check_config_security(config_file)
                vulnerabilities.extend(issues)
                
            return {
                'scan_type': 'configuration',
                'timestamp': datetime.utcnow().isoformat(),
                'vulnerabilities': [vars(v) for v in vulnerabilities]
            }
            
        except Exception as e:
            self.logger.error(f"Configuration scan error: {str(e)}")
            return {
                'scan_type': 'configuration',
                'timestamp': datetime.utcnow().isoformat(),
                'error': str(e)
            }
            
    def _find_config_files(self) -> List[str]:
        """Find configuration files in the project."""
        config_files = []
        for root, _, files in os.walk('.'):
            for file in files:
                if file.endswith(('.yml', '.yaml', '.json', '.config', '.ini')):
                    config_files.append(os.path.join(root, file))
        return config_files
        
    def _check_config_security(self, config_file: str) -> List[Vulnerability]:
        """Check configuration file for security issues."""
        vulnerabilities = []
        
        try:
            with open(config_file, 'r') as f:
                content = f.read()
                
            # Check for hardcoded secrets
            if self._contains_secrets(content):
                vuln = Vulnerability(
                    id='CONFIG_001',
                    title='Hardcoded Secrets',
                    description=f'Potential secrets found in {config_file}',
                    severity='high',
                    cvss_score=9.0,
                    affected_component=config_file,
                    recommendation='Move secrets to environment variables or secure storage',
                    references=['https://owasp.org/www-community/vulnerabilities/Use_of_hard-coded_password']
                )
                vulnerabilities.append(vuln)
                
            # Check for insecure permissions
            if self._has_insecure_permissions(config_file):
                vuln = Vulnerability(
                    id='CONFIG_002',
                    title='Insecure File Permissions',
                    description=f'Overly permissive file permissions on {config_file}',
                    severity='medium',
                    cvss_score=6.0,
                    affected_component=config_file,
                    recommendation='Restrict file permissions to required minimum',
                    references=[]
                )
                vulnerabilities.append(vuln)
                
        except Exception as e:
            self.logger.error(f"Error checking config file {config_file}: {str(e)}")
            
        return vulnerabilities
        
    def _contains_secrets(self, content: str) -> bool:
        """Check if content contains potential secrets."""
        secret_patterns = [
            r'password\s*[=:]\s*["\']?\w+["\']?',
            r'secret\s*[=:]\s*["\']?\w+["\']?',
            r'api[_-]key\s*[=:]\s*["\']?\w+["\']?',
            r'access[_-]key\s*[=:]\s*["\']?\w+["\']?'
        ]
        
        return any(pattern in content.lower() for pattern in secret_patterns)
        
    def _has_insecure_permissions(self, file_path: str) -> bool:
        """Check if file has insecure permissions."""
        try:
            return (os.stat(file_path).st_mode & 0o777) > 0o600
        except Exception:
            return False
            
    def scan_all(self) -> Dict:
        """Run all security scans."""
        results = {
            'timestamp': datetime.utcnow().isoformat(),
            'scans': {}
        }
        
        # Run all scans
        results['scans']['dependencies'] = self.scan_dependencies()
        results['scans']['code'] = self.scan_code()
        results['scans']['configuration'] = self.scan_configuration()
        
        # Calculate overall statistics
        total_vulnerabilities = sum(
            len(scan.get('vulnerabilities', []))
            for scan in results['scans'].values()
        )
        
        high_severity = sum(
            len([v for v in scan.get('vulnerabilities', [])
                 if v['severity'] == 'high'])
            for scan in results['scans'].values()
        )
        
        results['summary'] = {
            'total_vulnerabilities': total_vulnerabilities,
            'high_severity_vulnerabilities': high_severity,
            'scan_status': 'failed' if high_severity > 0 else 'passed'
        }
        
        return results
