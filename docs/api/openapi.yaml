openapi: 3.0.3
info:
  title: Head AI API
  description: |
    Head AI API provides a comprehensive set of endpoints for AI-powered functionality,
    user management, project management, and system monitoring.
  version: 1.0.0
  contact:
    name: Head AI Support
    email: support@headai.com
    url: https://headai.com/support

servers:
  - url: https://api.headai.com/v1
    description: Production server
  - url: https://staging-api.headai.com/v1
    description: Staging server
  - url: http://localhost:8000/v1
    description: Local development server

security:
  - BearerAuth: []

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, manager, admin]
        created_at:
          type: string
          format: date-time
      required:
        - username
        - email
        - role

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        owner_id:
          type: string
          format: uuid
        settings:
          type: object
        created_at:
          type: string
          format: date-time
      required:
        - name
        - owner_id

    Dataset:
      type: object
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        file_path:
          type: string
        file_size:
          type: integer
        metadata:
          type: object
      required:
        - project_id
        - name
        - file_path

    Model:
      type: object
      properties:
        id:
          type: string
          format: uuid
        project_id:
          type: string
          format: uuid
        name:
          type: string
        type:
          type: string
        version:
          type: string
        parameters:
          type: object
        metrics:
          type: object
      required:
        - project_id
        - name
        - type
        - version

    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
        details:
          type: object

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      summary: Authenticate user
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
              required:
                - username
                - password
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects:
    get:
      summary: List all projects
      tags: [Projects]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'

    post:
      summary: Create a new project
      tags: [Projects]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /projects/{project_id}:
    parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: Get project details
      tags: [Projects]
      responses:
        '200':
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
        '404':
          description: Project not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /projects/{project_id}/datasets:
    parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      summary: List project datasets
      tags: [Datasets]
      responses:
        '200':
          description: List of datasets
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dataset'

    post:
      summary: Upload new dataset
      tags: [Datasets]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                file:
                  type: string
                  format: binary
              required:
                - name
                - file
      responses:
        '201':
          description: Dataset uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'

  /models:
    get:
      summary: List all models
      tags: [Models]
      parameters:
        - name: project_id
          in: query
          schema:
            type: string
            format: uuid
        - name: type
          in: query
          schema:
            type: string
      responses:
        '200':
          description: List of models
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Model'

    post:
      summary: Create new model
      tags: [Models]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Model'
      responses:
        '201':
          description: Model created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Model'

  /system/metrics:
    get:
      summary: Get system metrics
      tags: [Monitoring]
      security:
        - BearerAuth: []
      parameters:
        - name: start_time
          in: query
          schema:
            type: string
            format: date-time
        - name: end_time
          in: query
          schema:
            type: string
            format: date-time
        - name: metrics
          in: query
          schema:
            type: array
            items:
              type: string
              enum: [cpu, memory, disk, network]
      responses:
        '200':
          description: System metrics
          content:
            application/json:
              schema:
                type: object
                properties:
                  metrics:
                    type: array
                    items:
                      type: object
                      properties:
                        timestamp:
                          type: string
                          format: date-time
                        name:
                          type: string
                        value:
                          type: number
                        metadata:
                          type: object

  /system/alerts:
    get:
      summary: Get system alerts
      tags: [Monitoring]
      security:
        - BearerAuth: []
      parameters:
        - name: severity
          in: query
          schema:
            type: string
            enum: [info, warning, error, critical]
        - name: status
          in: query
          schema:
            type: string
            enum: [active, acknowledged, resolved]
      responses:
        '200':
          description: System alerts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    title:
                      type: string
                    message:
                      type: string
                    severity:
                      type: string
                    status:
                      type: string
                    created_at:
                      type: string
                      format: date-time
