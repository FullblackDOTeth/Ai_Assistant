input {
  beats {
    port => 5044
  }
  
  tcp {
    port => 5000
    codec => json
  }
  
  http {
    port => 8080
    codec => json
  }
}

filter {
  if [type] == "application" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:log_level} \[%{DATA:service}\] %{GREEDYDATA:message}" }
    }
    
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }
    
    mutate {
      remove_field => [ "timestamp" ]
    }
  }
  
  if [type] == "access" {
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
    }
  }
  
  if [type] == "security" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{WORD:action} user=%{USER:username} ip=%{IP:client_ip} status=%{WORD:status}" }
    }
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    user => "${ELASTIC_USER}"
    password => "${ELASTIC_PASSWORD}"
    index => "headai-%{type}-%{+YYYY.MM.dd}"
    template_name => "headai"
  }
  
  if [log_level] == "ERROR" or [type] == "security" {
    email {
      to => "alerts@headai.com"
      from => "monitoring@headai.com"
      subject => "HeadAI Alert: %{log_level} - %{message}"
      body => "Time: %{@timestamp}\nLevel: %{log_level}\nService: %{service}\nMessage: %{message}"
      via => "smtp"
      options => {
        "host" => "smtp.gmail.com"
        "port" => 587
        "authentication" => "plain"
        "user_name" => "${SMTP_USER}"
        "password" => "${SMTP_PASSWORD}"
      }
    }
  }
}
